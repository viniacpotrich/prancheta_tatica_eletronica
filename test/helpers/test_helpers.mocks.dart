// Mocks generated by Mockito 5.4.2 from annotations
// in tactical_e_clipboard/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i18;
import 'dart:ui' as _i19;

import 'package:flutter/material.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i15;
import 'package:stacked_services/stacked_services.dart' as _i16;
import 'package:tactical_e_clipboard/model/config_model.dart' as _i11;
import 'package:tactical_e_clipboard/model/formation_model.dart' as _i5;
import 'package:tactical_e_clipboard/model/palyer_contract_model.dart' as _i13;
import 'package:tactical_e_clipboard/model/pattern_of_play_model.dart' as _i9;
import 'package:tactical_e_clipboard/model/player_model.dart' as _i3;
import 'package:tactical_e_clipboard/model/team_model.dart' as _i7;
import 'package:tactical_e_clipboard/services/config_repository_service.dart'
    as _i10;
import 'package:tactical_e_clipboard/services/config_service.dart' as _i25;
import 'package:tactical_e_clipboard/services/database_service.dart' as _i14;
import 'package:tactical_e_clipboard/services/formation_repository_service.dart'
    as _i4;
import 'package:tactical_e_clipboard/services/formation_service.dart' as _i22;
import 'package:tactical_e_clipboard/services/pattern_of_play_repository_service.dart'
    as _i8;
import 'package:tactical_e_clipboard/services/pattern_of_play_service.dart'
    as _i24;
import 'package:tactical_e_clipboard/services/player_contract_repository_service.dart'
    as _i12;
import 'package:tactical_e_clipboard/services/player_contract_service.dart'
    as _i26;
import 'package:tactical_e_clipboard/services/player_repository_service.dart'
    as _i2;
import 'package:tactical_e_clipboard/services/player_service.dart' as _i20;
import 'package:tactical_e_clipboard/services/team_repository_service.dart'
    as _i6;
import 'package:tactical_e_clipboard/services/team_service.dart' as _i23;
import 'package:uuid/uuid.dart' as _i21;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlayerRepositoryService_0 extends _i1.SmartFake
    implements _i2.PlayerRepositoryService {
  _FakePlayerRepositoryService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlayerModel_1 extends _i1.SmartFake implements _i3.PlayerModel {
  _FakePlayerModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFormationRepositoryService_2 extends _i1.SmartFake
    implements _i4.FormationRepositoryService {
  _FakeFormationRepositoryService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFormationModel_3 extends _i1.SmartFake
    implements _i5.FormationModel {
  _FakeFormationModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeamRepositoryService_4 extends _i1.SmartFake
    implements _i6.TeamRepositoryService {
  _FakeTeamRepositoryService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeamModel_5 extends _i1.SmartFake implements _i7.TeamModel {
  _FakeTeamModel_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePatternOfPlayRepositoryService_6 extends _i1.SmartFake
    implements _i8.PatternOfPlayRepositoryService {
  _FakePatternOfPlayRepositoryService_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePatternOfPlayModel_7 extends _i1.SmartFake
    implements _i9.PatternOfPlayModel {
  _FakePatternOfPlayModel_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfigRepositoryService_8 extends _i1.SmartFake
    implements _i10.ConfigRepositoryService {
  _FakeConfigRepositoryService_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfigModel_9 extends _i1.SmartFake implements _i11.ConfigModel {
  _FakeConfigModel_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlayerContractRepositoryService_10 extends _i1.SmartFake
    implements _i12.PlayerContractRepositoryService {
  _FakePlayerContractRepositoryService_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlayerContractModel_11 extends _i1.SmartFake
    implements _i13.PlayerContractModel {
  _FakePlayerContractModel_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseService_12 extends _i1.SmartFake
    implements _i14.DatabaseService {
  _FakeDatabaseService_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_13 extends _i1.SmartFake implements _i15.Database {
  _FakeDatabase_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i16.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i17.GlobalKey<_i17.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i17.GlobalKey<_i17.NavigatorState>?);
  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i16.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<T?>? navigateWithTransition<T>(
    _i17.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i17.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i16.Transition? transitionClass,
    _i16.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i18.Future<T?>?);
  @override
  _i18.Future<T?>? replaceWithTransition<T>(
    _i17.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i17.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i16.Transition? transitionClass,
    _i16.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i18.Future<T?>?);
  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void popUntil(
    _i17.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i17.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i18.Future<T?>?);
  @override
  _i18.Future<T?>? navigateToView<T>(
    _i17.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i17.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i16.Transition? transition,
    _i16.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i18.Future<T?>?);
  @override
  _i18.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i17.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i18.Future<T?>?);
  @override
  _i18.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i18.Future<T?>?);
  @override
  _i18.Future<T?>? clearStackAndShowView<T>(
    _i17.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i18.Future<T?>?);
  @override
  _i18.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i18.Future<T?>?);
  @override
  _i18.Future<T?>? clearTillFirstAndShowView<T>(
    _i17.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i18.Future<T?>?);
  @override
  _i18.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i17.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i18.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i16.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i16.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<_i16.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i18.Future<_i16.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i18.Future<_i16.SheetResponse<dynamic>?>.value(),
      ) as _i18.Future<_i16.SheetResponse<dynamic>?>);
  @override
  _i18.Future<_i16.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i19.Color? barrierColor = const _i19.Color(2315255808),
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i18.Future<_i16.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i18.Future<_i16.SheetResponse<T>?>.value(),
      ) as _i18.Future<_i16.SheetResponse<T>?>);
  @override
  void completeSheet(_i16.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i16.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i16.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i17.Widget Function(
      _i17.BuildContext,
      _i16.DialogRequest<dynamic>,
      dynamic Function(_i16.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<_i16.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i19.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i19.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i16.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i18.Future<_i16.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i18.Future<_i16.DialogResponse<dynamic>?>.value(),
      ) as _i18.Future<_i16.DialogResponse<dynamic>?>);
  @override
  _i18.Future<_i16.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i19.Color? barrierColor = const _i19.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i18.Future<_i16.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i18.Future<_i16.DialogResponse<T>?>.value(),
      ) as _i18.Future<_i16.DialogResponse<T>?>);
  @override
  _i18.Future<_i16.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i19.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i19.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i16.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i18.Future<_i16.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i18.Future<_i16.DialogResponse<dynamic>?>.value(),
      ) as _i18.Future<_i16.DialogResponse<dynamic>?>);
  @override
  void completeDialog(_i16.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PlayerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerService extends _i1.Mock implements _i20.PlayerService {
  @override
  _i2.PlayerRepositoryService get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePlayerRepositoryService_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakePlayerRepositoryService_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PlayerRepositoryService);
  @override
  _i18.Future<List<_i3.PlayerModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i18.Future<List<_i3.PlayerModel>>.value(<_i3.PlayerModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i3.PlayerModel>>.value(<_i3.PlayerModel>[]),
      ) as _i18.Future<List<_i3.PlayerModel>>);
  @override
  _i18.Future<_i3.PlayerModel?> get(_i21.Uuid? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i18.Future<_i3.PlayerModel?>.value(),
        returnValueForMissingStub: _i18.Future<_i3.PlayerModel?>.value(),
      ) as _i18.Future<_i3.PlayerModel?>);
  @override
  _i18.Future<_i3.PlayerModel> put(_i3.PlayerModel? t) => (super.noSuchMethod(
        Invocation.method(
          #put,
          [t],
        ),
        returnValue: _i18.Future<_i3.PlayerModel>.value(_FakePlayerModel_1(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i3.PlayerModel>.value(_FakePlayerModel_1(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
      ) as _i18.Future<_i3.PlayerModel>);
  @override
  _i18.Future<bool> delete(_i21.Uuid? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
}

/// A class which mocks [FormationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormationService extends _i1.Mock implements _i22.FormationService {
  @override
  _i4.FormationRepositoryService get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeFormationRepositoryService_2(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeFormationRepositoryService_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.FormationRepositoryService);
  @override
  _i18.Future<List<_i5.FormationModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i18.Future<List<_i5.FormationModel>>.value(<_i5.FormationModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i5.FormationModel>>.value(<_i5.FormationModel>[]),
      ) as _i18.Future<List<_i5.FormationModel>>);
  @override
  _i18.Future<_i5.FormationModel?> get(_i21.Uuid? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i18.Future<_i5.FormationModel?>.value(),
        returnValueForMissingStub: _i18.Future<_i5.FormationModel?>.value(),
      ) as _i18.Future<_i5.FormationModel?>);
  @override
  _i18.Future<_i5.FormationModel> put(_i5.FormationModel? t) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [t],
        ),
        returnValue:
            _i18.Future<_i5.FormationModel>.value(_FakeFormationModel_3(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i5.FormationModel>.value(_FakeFormationModel_3(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
      ) as _i18.Future<_i5.FormationModel>);
  @override
  _i18.Future<bool> delete(_i21.Uuid? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
}

/// A class which mocks [TeamService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamService extends _i1.Mock implements _i23.TeamService {
  @override
  _i6.TeamRepositoryService get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTeamRepositoryService_4(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeTeamRepositoryService_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.TeamRepositoryService);
  @override
  _i18.Future<List<_i7.TeamModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i18.Future<List<_i7.TeamModel>>.value(<_i7.TeamModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i7.TeamModel>>.value(<_i7.TeamModel>[]),
      ) as _i18.Future<List<_i7.TeamModel>>);
  @override
  _i18.Future<_i7.TeamModel?> get(_i21.Uuid? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i18.Future<_i7.TeamModel?>.value(),
        returnValueForMissingStub: _i18.Future<_i7.TeamModel?>.value(),
      ) as _i18.Future<_i7.TeamModel?>);
  @override
  _i18.Future<_i7.TeamModel> put(_i7.TeamModel? t) => (super.noSuchMethod(
        Invocation.method(
          #put,
          [t],
        ),
        returnValue: _i18.Future<_i7.TeamModel>.value(_FakeTeamModel_5(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i7.TeamModel>.value(_FakeTeamModel_5(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
      ) as _i18.Future<_i7.TeamModel>);
  @override
  _i18.Future<bool> delete(_i21.Uuid? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
}

/// A class which mocks [PatternOfPlayService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatternOfPlayService extends _i1.Mock
    implements _i24.PatternOfPlayService {
  @override
  _i8.PatternOfPlayRepositoryService get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePatternOfPlayRepositoryService_6(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakePatternOfPlayRepositoryService_6(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i8.PatternOfPlayRepositoryService);
  @override
  _i18.Future<List<_i9.PatternOfPlayModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i18.Future<List<_i9.PatternOfPlayModel>>.value(
            <_i9.PatternOfPlayModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i9.PatternOfPlayModel>>.value(
                <_i9.PatternOfPlayModel>[]),
      ) as _i18.Future<List<_i9.PatternOfPlayModel>>);
  @override
  _i18.Future<_i9.PatternOfPlayModel?> get(_i21.Uuid? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i18.Future<_i9.PatternOfPlayModel?>.value(),
        returnValueForMissingStub: _i18.Future<_i9.PatternOfPlayModel?>.value(),
      ) as _i18.Future<_i9.PatternOfPlayModel?>);
  @override
  _i18.Future<_i9.PatternOfPlayModel> put(_i9.PatternOfPlayModel? t) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [t],
        ),
        returnValue:
            _i18.Future<_i9.PatternOfPlayModel>.value(_FakePatternOfPlayModel_7(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i9.PatternOfPlayModel>.value(_FakePatternOfPlayModel_7(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
      ) as _i18.Future<_i9.PatternOfPlayModel>);
  @override
  _i18.Future<bool> delete(_i21.Uuid? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i25.ConfigService {
  @override
  _i10.ConfigRepositoryService get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeConfigRepositoryService_8(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeConfigRepositoryService_8(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i10.ConfigRepositoryService);
  @override
  _i18.Future<List<_i11.ConfigModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i18.Future<List<_i11.ConfigModel>>.value(<_i11.ConfigModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i11.ConfigModel>>.value(<_i11.ConfigModel>[]),
      ) as _i18.Future<List<_i11.ConfigModel>>);
  @override
  _i18.Future<_i11.ConfigModel?> get(_i21.Uuid? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i18.Future<_i11.ConfigModel?>.value(),
        returnValueForMissingStub: _i18.Future<_i11.ConfigModel?>.value(),
      ) as _i18.Future<_i11.ConfigModel?>);
  @override
  _i18.Future<_i11.ConfigModel> put(_i11.ConfigModel? t) => (super.noSuchMethod(
        Invocation.method(
          #put,
          [t],
        ),
        returnValue: _i18.Future<_i11.ConfigModel>.value(_FakeConfigModel_9(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i11.ConfigModel>.value(_FakeConfigModel_9(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
      ) as _i18.Future<_i11.ConfigModel>);
  @override
  _i18.Future<bool> delete(_i21.Uuid? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
}

/// A class which mocks [PlayerContractService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerContractService extends _i1.Mock
    implements _i26.PlayerContractService {
  @override
  _i12.PlayerContractRepositoryService get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePlayerContractRepositoryService_10(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakePlayerContractRepositoryService_10(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i12.PlayerContractRepositoryService);
  @override
  _i18.Future<List<_i13.PlayerContractModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i18.Future<List<_i13.PlayerContractModel>>.value(
            <_i13.PlayerContractModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i13.PlayerContractModel>>.value(
                <_i13.PlayerContractModel>[]),
      ) as _i18.Future<List<_i13.PlayerContractModel>>);
  @override
  _i18.Future<_i13.PlayerContractModel?> get(_i21.Uuid? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i18.Future<_i13.PlayerContractModel?>.value(),
        returnValueForMissingStub:
            _i18.Future<_i13.PlayerContractModel?>.value(),
      ) as _i18.Future<_i13.PlayerContractModel?>);
  @override
  _i18.Future<_i13.PlayerContractModel> put(_i13.PlayerContractModel? t) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [t],
        ),
        returnValue: _i18.Future<_i13.PlayerContractModel>.value(
            _FakePlayerContractModel_11(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
        returnValueForMissingStub: _i18.Future<_i13.PlayerContractModel>.value(
            _FakePlayerContractModel_11(
          this,
          Invocation.method(
            #put,
            [t],
          ),
        )),
      ) as _i18.Future<_i13.PlayerContractModel>);
  @override
  _i18.Future<bool> delete(_i21.Uuid? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
}

/// A class which mocks [ConfigRepositoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigRepositoryService extends _i1.Mock
    implements _i10.ConfigRepositoryService {
  @override
  _i14.DatabaseService get dbm => (super.noSuchMethod(
        Invocation.getter(#dbm),
        returnValue: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
        returnValueForMissingStub: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
      ) as _i14.DatabaseService);
  @override
  _i18.Future<bool> delete(_i21.Uuid? k) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [k],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<_i11.ConfigModel> get(_i21.Uuid? t) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [t],
        ),
        returnValue: _i18.Future<_i11.ConfigModel>.value(_FakeConfigModel_9(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i11.ConfigModel>.value(_FakeConfigModel_9(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
      ) as _i18.Future<_i11.ConfigModel>);
  @override
  _i18.Future<List<_i11.ConfigModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i18.Future<List<_i11.ConfigModel>>.value(<_i11.ConfigModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i11.ConfigModel>>.value(<_i11.ConfigModel>[]),
      ) as _i18.Future<List<_i11.ConfigModel>>);
  @override
  _i18.Future<_i11.ConfigModel> patch(_i11.ConfigModel? k) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [k],
        ),
        returnValue: _i18.Future<_i11.ConfigModel>.value(_FakeConfigModel_9(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i11.ConfigModel>.value(_FakeConfigModel_9(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
      ) as _i18.Future<_i11.ConfigModel>);
  @override
  _i18.Future<_i11.ConfigModel> put(_i11.ConfigModel? k) => (super.noSuchMethod(
        Invocation.method(
          #put,
          [k],
        ),
        returnValue: _i18.Future<_i11.ConfigModel>.value(_FakeConfigModel_9(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i11.ConfigModel>.value(_FakeConfigModel_9(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
      ) as _i18.Future<_i11.ConfigModel>);
}

/// A class which mocks [FormationRepositoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormationRepositoryService extends _i1.Mock
    implements _i4.FormationRepositoryService {
  @override
  _i14.DatabaseService get dbm => (super.noSuchMethod(
        Invocation.getter(#dbm),
        returnValue: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
        returnValueForMissingStub: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
      ) as _i14.DatabaseService);
  @override
  _i18.Future<bool> delete(_i21.Uuid? k) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [k],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<_i5.FormationModel> get(_i21.Uuid? t) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [t],
        ),
        returnValue:
            _i18.Future<_i5.FormationModel>.value(_FakeFormationModel_3(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i5.FormationModel>.value(_FakeFormationModel_3(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
      ) as _i18.Future<_i5.FormationModel>);
  @override
  _i18.Future<List<_i5.FormationModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i18.Future<List<_i5.FormationModel>>.value(<_i5.FormationModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i5.FormationModel>>.value(<_i5.FormationModel>[]),
      ) as _i18.Future<List<_i5.FormationModel>>);
  @override
  _i18.Future<_i5.FormationModel> patch(_i5.FormationModel? k) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [k],
        ),
        returnValue:
            _i18.Future<_i5.FormationModel>.value(_FakeFormationModel_3(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i5.FormationModel>.value(_FakeFormationModel_3(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
      ) as _i18.Future<_i5.FormationModel>);
  @override
  _i18.Future<_i5.FormationModel> put(_i5.FormationModel? k) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [k],
        ),
        returnValue:
            _i18.Future<_i5.FormationModel>.value(_FakeFormationModel_3(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i5.FormationModel>.value(_FakeFormationModel_3(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
      ) as _i18.Future<_i5.FormationModel>);
}

/// A class which mocks [PatternOfPlayRepositoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatternOfPlayRepositoryService extends _i1.Mock
    implements _i8.PatternOfPlayRepositoryService {
  @override
  _i14.DatabaseService get dbm => (super.noSuchMethod(
        Invocation.getter(#dbm),
        returnValue: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
        returnValueForMissingStub: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
      ) as _i14.DatabaseService);
  @override
  _i18.Future<bool> delete(_i21.Uuid? k) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [k],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<_i9.PatternOfPlayModel> get(_i21.Uuid? t) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [t],
        ),
        returnValue:
            _i18.Future<_i9.PatternOfPlayModel>.value(_FakePatternOfPlayModel_7(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i9.PatternOfPlayModel>.value(_FakePatternOfPlayModel_7(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
      ) as _i18.Future<_i9.PatternOfPlayModel>);
  @override
  _i18.Future<List<_i9.PatternOfPlayModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i18.Future<List<_i9.PatternOfPlayModel>>.value(
            <_i9.PatternOfPlayModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i9.PatternOfPlayModel>>.value(
                <_i9.PatternOfPlayModel>[]),
      ) as _i18.Future<List<_i9.PatternOfPlayModel>>);
  @override
  _i18.Future<_i9.PatternOfPlayModel> patch(_i9.PatternOfPlayModel? k) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [k],
        ),
        returnValue:
            _i18.Future<_i9.PatternOfPlayModel>.value(_FakePatternOfPlayModel_7(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i9.PatternOfPlayModel>.value(_FakePatternOfPlayModel_7(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
      ) as _i18.Future<_i9.PatternOfPlayModel>);
  @override
  _i18.Future<_i9.PatternOfPlayModel> put(_i9.PatternOfPlayModel? k) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [k],
        ),
        returnValue:
            _i18.Future<_i9.PatternOfPlayModel>.value(_FakePatternOfPlayModel_7(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i9.PatternOfPlayModel>.value(_FakePatternOfPlayModel_7(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
      ) as _i18.Future<_i9.PatternOfPlayModel>);
}

/// A class which mocks [PlayerContractRepositoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerContractRepositoryService extends _i1.Mock
    implements _i12.PlayerContractRepositoryService {
  @override
  _i14.DatabaseService get dbm => (super.noSuchMethod(
        Invocation.getter(#dbm),
        returnValue: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
        returnValueForMissingStub: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
      ) as _i14.DatabaseService);
  @override
  _i18.Future<bool> delete(_i21.Uuid? k) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [k],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<_i13.PlayerContractModel> get(_i21.Uuid? t) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [t],
        ),
        returnValue: _i18.Future<_i13.PlayerContractModel>.value(
            _FakePlayerContractModel_11(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
        returnValueForMissingStub: _i18.Future<_i13.PlayerContractModel>.value(
            _FakePlayerContractModel_11(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
      ) as _i18.Future<_i13.PlayerContractModel>);
  @override
  _i18.Future<List<_i13.PlayerContractModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i18.Future<List<_i13.PlayerContractModel>>.value(
            <_i13.PlayerContractModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i13.PlayerContractModel>>.value(
                <_i13.PlayerContractModel>[]),
      ) as _i18.Future<List<_i13.PlayerContractModel>>);
  @override
  _i18.Future<_i13.PlayerContractModel> patch(_i13.PlayerContractModel? k) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [k],
        ),
        returnValue: _i18.Future<_i13.PlayerContractModel>.value(
            _FakePlayerContractModel_11(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
        returnValueForMissingStub: _i18.Future<_i13.PlayerContractModel>.value(
            _FakePlayerContractModel_11(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
      ) as _i18.Future<_i13.PlayerContractModel>);
  @override
  _i18.Future<_i13.PlayerContractModel> put(_i13.PlayerContractModel? k) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [k],
        ),
        returnValue: _i18.Future<_i13.PlayerContractModel>.value(
            _FakePlayerContractModel_11(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
        returnValueForMissingStub: _i18.Future<_i13.PlayerContractModel>.value(
            _FakePlayerContractModel_11(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
      ) as _i18.Future<_i13.PlayerContractModel>);
}

/// A class which mocks [PlayerRepositoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerRepositoryService extends _i1.Mock
    implements _i2.PlayerRepositoryService {
  @override
  _i14.DatabaseService get dbm => (super.noSuchMethod(
        Invocation.getter(#dbm),
        returnValue: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
        returnValueForMissingStub: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
      ) as _i14.DatabaseService);
  @override
  _i18.Future<_i3.PlayerModel> get(_i21.Uuid? t) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [t],
        ),
        returnValue: _i18.Future<_i3.PlayerModel>.value(_FakePlayerModel_1(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i3.PlayerModel>.value(_FakePlayerModel_1(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
      ) as _i18.Future<_i3.PlayerModel>);
  @override
  _i18.Future<bool> delete(_i21.Uuid? k) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [k],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<List<_i3.PlayerModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i18.Future<List<_i3.PlayerModel>>.value(<_i3.PlayerModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i3.PlayerModel>>.value(<_i3.PlayerModel>[]),
      ) as _i18.Future<List<_i3.PlayerModel>>);
  @override
  _i18.Future<_i3.PlayerModel> patch(_i3.PlayerModel? k) => (super.noSuchMethod(
        Invocation.method(
          #patch,
          [k],
        ),
        returnValue: _i18.Future<_i3.PlayerModel>.value(_FakePlayerModel_1(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i3.PlayerModel>.value(_FakePlayerModel_1(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
      ) as _i18.Future<_i3.PlayerModel>);
  @override
  _i18.Future<_i3.PlayerModel> put(_i3.PlayerModel? k) => (super.noSuchMethod(
        Invocation.method(
          #put,
          [k],
        ),
        returnValue: _i18.Future<_i3.PlayerModel>.value(_FakePlayerModel_1(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i3.PlayerModel>.value(_FakePlayerModel_1(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
      ) as _i18.Future<_i3.PlayerModel>);
}

/// A class which mocks [TeamRepositoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamRepositoryService extends _i1.Mock
    implements _i6.TeamRepositoryService {
  @override
  _i14.DatabaseService get dbm => (super.noSuchMethod(
        Invocation.getter(#dbm),
        returnValue: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
        returnValueForMissingStub: _FakeDatabaseService_12(
          this,
          Invocation.getter(#dbm),
        ),
      ) as _i14.DatabaseService);
  @override
  _i18.Future<bool> delete(_i21.Uuid? k) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [k],
        ),
        returnValue: _i18.Future<bool>.value(false),
        returnValueForMissingStub: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<_i7.TeamModel> get(_i21.Uuid? t) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [t],
        ),
        returnValue: _i18.Future<_i7.TeamModel>.value(_FakeTeamModel_5(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i7.TeamModel>.value(_FakeTeamModel_5(
          this,
          Invocation.method(
            #get,
            [t],
          ),
        )),
      ) as _i18.Future<_i7.TeamModel>);
  @override
  _i18.Future<List<_i7.TeamModel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i18.Future<List<_i7.TeamModel>>.value(<_i7.TeamModel>[]),
        returnValueForMissingStub:
            _i18.Future<List<_i7.TeamModel>>.value(<_i7.TeamModel>[]),
      ) as _i18.Future<List<_i7.TeamModel>>);
  @override
  _i18.Future<_i7.TeamModel> patch(_i7.TeamModel? k) => (super.noSuchMethod(
        Invocation.method(
          #patch,
          [k],
        ),
        returnValue: _i18.Future<_i7.TeamModel>.value(_FakeTeamModel_5(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i7.TeamModel>.value(_FakeTeamModel_5(
          this,
          Invocation.method(
            #patch,
            [k],
          ),
        )),
      ) as _i18.Future<_i7.TeamModel>);
  @override
  _i18.Future<_i7.TeamModel> put(_i7.TeamModel? k) => (super.noSuchMethod(
        Invocation.method(
          #put,
          [k],
        ),
        returnValue: _i18.Future<_i7.TeamModel>.value(_FakeTeamModel_5(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
        returnValueForMissingStub:
            _i18.Future<_i7.TeamModel>.value(_FakeTeamModel_5(
          this,
          Invocation.method(
            #put,
            [k],
          ),
        )),
      ) as _i18.Future<_i7.TeamModel>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i14.DatabaseService {
  @override
  _i15.Database getInstanceDB() => (super.noSuchMethod(
        Invocation.method(
          #getInstanceDB,
          [],
        ),
        returnValue: _FakeDatabase_13(
          this,
          Invocation.method(
            #getInstanceDB,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDatabase_13(
          this,
          Invocation.method(
            #getInstanceDB,
            [],
          ),
        ),
      ) as _i15.Database);
  @override
  _i18.Future<void> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
}
